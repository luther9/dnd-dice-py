#!/usr/bin/env python3

# Copyright 2016-2017, 2019, 2021 Luther Thompson

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License (GPL3) as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# You have the following additional permission: You may convey the program in
# object code form under the terms of sections 4 and 5 of GPL3 without being
# bound by section 6 of GPL3.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

import argparse
from random import Random

abilities = 'Str', 'Dex', 'Con', 'Int', 'Wis', 'Cha'

parser = argparse.ArgumentParser(add_help=False)
parser.add_argument('-help', action='help')
parser.add_argument(
    'n', nargs='?', default=1, type=int,
    help='The number of dice to roll')
parser.add_argument(
    'd', nargs='?', default=20, type=int,
    help='The number of sides on each die')
parser.add_argument(
    '-character',
    action='store_true',
    help='Generate character stats',
)
parser.add_argument(
    '-sort',
    action='store_true',
    help='Sort the output',
)
parser.add_argument('-seed', type=int, help='The RNG seed')


def reverse_sort(iterable):
    '''People will hate the RNG less if the bigger numbers come first.'''
    return sorted(iterable, reverse=True)


def roll_dice(rng, n, d):
    return tuple(rng.randrange(d)+1 for _ in range(n))


def ability_score(rng):
    roll = roll_dice(rng, 4, 6)
    return roll, sum(sorted(roll)[1:])


def printIter(iterable):
    """Print each item on a line."""
    print(*iterable, sep='\n')


def main():
    args = parser.parse_args()
    rng = Random(args.seed)
    if args.character:
        stats = tuple(ability_score(rng) for _ in range(6))
        if args.sort:
            print(
                *(a[0] for a in stats),
                reverse_sort(s[1] for s in stats),
                sep='\n',
            )
        else:
            printIter(
                f'{name} {score:2} {roll}'
                for name, roll, score in (
                    (name, a[0], a[1]) for name, a in zip(abilities, stats)
                )
            )
    else:
        roll = roll_dice(rng, args.n, args.d)
        print(reverse_sort(roll) if args.sort else roll, sum(roll), sep='\n')


main()
