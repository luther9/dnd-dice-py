#!/usr/bin/env python3

import argparse
from random import Random

abilities = 'Str', 'Dex', 'Con', 'Int', 'Wis', 'Cha'

parser = argparse.ArgumentParser(add_help=False)
parser.add_argument('-help', action='help')
parser.add_argument(
    'n', nargs='?', default=1, type=int,
    help='The number of dice to roll')
parser.add_argument(
    'd', nargs='?', default=20, type=int,
    help='The number of sides on each die')
parser.add_argument(
    '-character',
    action='store_true',
    help='Generate character stats',
)
parser.add_argument(
    '-sort',
    action='store_true',
    help='Sort the output',
)
parser.add_argument('-seed', type=int, help='The RNG seed')


def reverse_sort(iterable):
    '''People will hate the RNG less if the bigger numbers come first.'''
    return sorted(iterable, reverse=True)


def roll_dice(rng, n, d):
    return tuple(rng.randrange(d)+1 for _ in range(n))


def ability_score(rng):
    roll = roll_dice(rng, 4, 6)
    return roll, sum(sorted(roll)[1:])


def printIter(iterable):
    """Print each item on a line."""
    for x in iterable:
        print(x)


def main():
    args = parser.parse_args()
    rng = Random(args.seed)
    if args.character:
        stats = tuple(ability_score(rng) for _ in range(6))
        if args.sort:
            printIter(a[0] for a in stats)
            print(reverse_sort(s[1] for s in stats))
        else:
            printIter(
                f'{name} {score:2} {roll}'
                for name, roll, score in (
                    (name, a[0], a[1]) for name, a in zip(abilities, stats)
                )
            )
    else:
        roll = roll_dice(rng, args.n, args.d)
        print(reverse_sort(roll) if args.sort else roll)
        print(sum(roll))


main()
